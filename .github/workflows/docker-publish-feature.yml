name: Docker-feature

on:
  schedule:
    - cron: '34 1 * * *'
  push:
    branches: [ "feature/*" ]
    tags: [ 'v*.*.*' ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: tboproject/tbo

jobs:
  checkout:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

  install-cosign:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
        with:
          cosign-release: 'v2.1.1'

  setup-docker-buildx:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

  login-docker-registry:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

  extract-docker-metadata:
    runs-on: ubuntu-latest

    steps:
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  build-and-push-docker-image:
    runs-on: ubuntu-latest
    needs: [checkout, install-cosign, setup-docker-buildx, login-docker-registry, extract-docker-metadata]

    steps:
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  sign-docker-image:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    needs: build-and-push-docker-image

    steps:
      - name: Sign the published Docker image
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ needs.build-and-push-docker-image.outputs.digest }}
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  install-dependencies:
    runs-on: ubuntu-latest

    steps:
      - name: Install required python dependencies
        run: |
          pip install -r requirements.txt

  run-pytest:
    runs-on: ubuntu-latest
    needs: install-dependencies

    steps:
      - name: Run Pytest
        continue-on-error: true
        run: |
          pip install pytest
          pytest --trace project/tests/

  run-bandit-analysis:
    runs-on: ubuntu-latest
    needs: install-dependencies

    steps:
      - name: Run Bandit (Python Static Analysis)
        continue-on-error: true
        run: |
          pip install bandit
          bandit -r . # Recursively scan all Python files

  start-flask-application:
    runs-on: ubuntu-latest

    steps:
      - name: Start Flask Application
        run: |
          nohup python app.py &

  run-owasp-zap-scan:
    runs-on: ubuntu-latest
    needs: start-flask-application

    steps:
      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.9.0
        with:
          target: 'http://127.0.0.1:5000'

  stop-flask-application:
    runs-on: ubuntu-latest
    needs: run-owasp-zap-scan

    steps:
      - name: Stop Flask Application
        run: |
          pkill -f "python app.py"
